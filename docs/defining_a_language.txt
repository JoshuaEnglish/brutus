====================
Defining a Language
====================

There are several steps to defining a Domain Specific Language. In this example
we'll create a multi-line four-function calculator that can accept input like
this::

    a <- 2*7+3*2 . 
    b<-a/2.

And return results as a dictionary ``{"A": 20, "B": 10}``

.. note::

    The example input demonstrates that spaces shouldn't matter, and ``<-`` is
    being used as an assignment or storage operator.

We will define the |REBNF| for the languange and a CodeWriter to do this.

The parser will take the |REBNF| and create an tokenizer, which will turn our 
input into the following::

    [<VAR Token: a >, <STORE Token: <- >, <INTEGER Token: 2 >, <MUL Token: * >, 
    <INTEGER Token: 7 >, <PLUS Token: + >, <INTEGER Token: 3 >, <MUL Token: * >, 
    <INTEGER Token: 2 >, <STOP Token: . >, <VAR Token: b >, <STORE Token: <- >, 
    <VAR Token: a >, <DIV Token: / >, <INTEGER Token: 2 >, <STOP Token: . >]

The Parser will turn this list of tokens into a concrete
syntax tree::

    <statements>
      <assignment>
        <var> a </var>
        <store> <- </store>
        <expr>
          <term>
            <integer> 2 </integer>
            <mul> * </mul>
            <integer> 7 </integer>
          </term>
          <plus> + </plus>
          <term>
            <integer> 3 </integer>
            <mul> * </mul>
            <integer> 2 </integer>
          </term>
        </expr>
        <stop> . </stop>
      </assignment>
      <assignment>
        <var> b </var>
        <store> <- </store>
        <term>
          <var> a </var>
          <div> / </div>
          <integer> 2 </integer>
        </term>
        <stop> . </stop>
      </assignment>
    </statements>

    
The Coder will take this concrete syntax tree and produce a program
for the stack-based virtual machine::

    2 7 * 3 2 * + a' a 2 / b' END
    
After running this program the machine's registers will be a dictionary::

    {'B': 10.0, 'A': 20}



The REBNF
=========

|REBNF| uses :abbr:`EBNF (Extended Backus-Naur Form)` to define non-terminal symbols and 
regular expressions to define terminal symbols.

Our |REBNF| looks like this::

    statements := assignment { assignment } ;
    assignment := VAR STORE expr STOP;
    expr := term {(PLUS | MINUS) term};
    term := factor {(MUL | DIV) factor};
    factor := INTEGER | VAR | OP expr CP;
    VAR := [a-z]+;
    INTEGER := [0-9]+;
    STORE := <-;
    PLUS := [+];
    MINUS := [\-];
    MUL := [*];
    DIV := [/];
    STOP := [\.];
    OP := [(];
    CP := [)];

|REBNF| uses the following rules:


=========  ============================================================
Item       Description
=========  ============================================================
UPPERCASE  Anything in uppercase is considered a terminal symbol
           and should define a regular expression
           
lowercase  Anything in lowercase in considered a non terminal symbol
           defined by a rule
           
"x"        Anything in quotes is a literal symbol. This is the text 
           that must appear in the program. The language tokenizer can 
           have any symbol, as long as the lexeme matches
           
{}         Curly brackets are used to group an optional repeating group 
           which much appear 0 or more times
   
()         Parenthesis group tokens and other groups.

[]         Square brackets indicate optional sequences

<>         Angled brackets indicate sequences that should appear at
           least once.
           
|          The pipe serves as the OR operator. ("+" | "-") indicates
           either of two literals will be accepted.
           
;          End of an EBNF definition line.
=========  ============================================================

